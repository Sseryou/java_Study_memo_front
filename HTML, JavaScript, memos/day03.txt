웹브라우저
	-자바스크립트를 해석해주는 엔진(V8)
	-크롬
	-shift + enter -> 줄개행
	-enter = 실행

자바스크립트 기초문법

1.변수
	변수 - 변하는 수 (데이터)
	      - 바구니 (공간 - 메모리)
	      - 공간의 이름
	      - 공간의 이름(메모리 이름)

	var 변수명 = 값;

	-변수 명명 규칙
		의미있는 단어
		숫자, 알파벳, 특수문자(_$)
		숫자는 변수명 앞에 올 수 없음
		예약어(이미 문법적으로 사용하고 있는 단어)는 사용불가

		변수명 작성 관례
			단어와 단어의 시작 첫 글자는 대문자(가장 첫 단어는 소문자)
			카멜 표기법
			
	var 변수명 = 숫자|논리값;
		  = "문자";
		  = '문자';

	typeof -> 자료형 체크 연산자
	
	논리형 ->  true(참), false(거짓)
		string(문자형)
		number(숫자형)
		boolean(논리형)
			
2.자료형
	원시타입 자료형 - 숫자, 문자, 논리형, - 재료가 되는 자료
		숫자형 자료형(number)
			-정수(예 - 10, 20, 1, -2, 0....)
			-실수(예 - 0.34, -0.23....)
		문자형 자료형(string)
			-" ", ' '  ->문자

		논리형 자료형(boolean) - 참, 거짓
			true, false

			-자바스크립트에서는 특정 값으로 false를 인식
			0, '', null, undefined -> false로 인식
			- false로 인식하는 값을 제외한 모든 문자 -> true


		undefined : 값이 지정되지 않은 자료형
		
		null : 값이 비어 있음
	
	객체 자료형(참조 자료형)


3.연산자
	10 + 20
	연산자 - 연산에 사용되는 기호
	항 - 연산에 사용되는 값

	-단항 연산, 이항 연산, 삼항 연산

	산술 연산자
		+, -, *, /
	
		기존 산술연산과 같이 곱셉 나눗셈이 먼저 적용
		( ) 소괄호로 우선순위 강제 적용

		% -> 나머지 연산자
		1,3,5,7,9 ... 홀수  2n + 1
		2,4,6,8,10 ... 짝수

		수치 : + 계산
		문자 : + 문자열 결합


	대입 연산자 (=)

		오른쪽에 있는 값을 왼쪽 변수에 저장
		*연산이 가장 마지막에 실행
		우선순위가 가장 낮은 연산자

	증가감소 연산자(단항 연산)
		++
			num++; // num = num + 1; 대입후 덧셈
			++num; // num = num + 1; 덧셈후 대입
		--
			num--; // num = num - 1; 대입후 뺄셈
			--num; // num = num - 1; 뺄셈후 대입

	비교(관계) 연산자
		> , <, >=, <=, ==(같다), !=(다르다)
			연산결과 - 논리값(참, 거짓, true, false)

		javascript var은 자료형을 따지지 않음.
		=== : 주소값 비교
		!== : 주소값 비교(다를때)

	논리 연산자
	AND - 교집합 (둘다 참이어야 참) -&&
	OR - 합집합 (한쪽만 참이어도 참) -||
	NOT - 부정 (참을 거짓으로, 거짓을 참으로 반환) - !

	단락 회로 평가
	연산이 끝나면 최종 값을 반환
	var num;
	typeof num;
	num = num || 10;
	10
	num;
	10

	논리 연산자의 우선순위가 비교 연산자보다 낮다

	false - 값으로 false가 되는 조건
		0, '', undefined, null

	true - false가 되지 않는 모든 조건

	복합 대입 연산자
		(=)
	산술연산 + 대입
	num = num + 2 -> num += 2;

	삼항 조건 연산자
	(조건식 - 참, 거짓을 체크하는 연산식) ? 참일때 : 거짓일때

	우선순위 
	( ) > 단항연산 .... > 비교 > 논리 > 대입
	
4.제어문
	- 참, 거짓 -> 참일때 실행, 거짓일때 실행

	if(조건식 - 참, 거짓 연산자) {
	//참일때 실행되는 영역
	}

	if(조건식 - 참, 거짓 연산자) {
	//참일때 실행되는 영역
	} else {
	//거짓일때 실행되는 영역
	}

	if(조건식 1) {
	//조건식 1이 참일때 실행되는 영역
	} else if (조건식 2) {
	//조건식1이 거짓이고 조건식 2가 참일때 실행되는 영역
	} else if (조건식 3 {
	//조건식 1,2가 거짓이고 조건식 3이 참일때 실행
	}

	else //앞의 조건식이 모두 거짓일때 실행

	
	조건식 : 논리, 비교 연산자

	( ... ) 참, 거짓 체크
	{ ... } 실행되는 코드

	값을 출력
	console
		log(변수, 값)
		dir(객체)


	


5.선택문
	값의 일치여부 체크하는 조건식을 대체
	
	switch (키워드) {
		case "값1" : //값이 일치하면 실행되는 코드
		case "값2" : //값이 일치하면 실행되는 코드
		break; -> 실행 중단
		case "값3" : //값이 일치하면 실행되는 코드
		...
		default : //모든 값이 일치하지 않을때 실행되는 코드
		}
	
6.반복문
	while(조건식) {
	//조건식이 참일때 반복 실행되는 영역
	}

	do ~ while

	do{
	//무조건 한번은 실행, 조건식이 참이면 반복실행
	}while(조건식);

	특정 횟수만큼 반복
	for(초기화식; 조건식; 증감식;){
	//조건식이 참이면 반복실행
	}

	continue -> 현재 반복을 중단하고 새로 반복 시작 : 건너뛰기

	중첩 반복문 : 반복문 안의 반복문

	for -> for 
	for-> while 
	while -> while 
	while -> for
	
	i, j, k, l, m.....

	예시(구구단)

	for(var i = 2; i <= 9; i++){
   	 console.log("==========="+ i + " 단 " + "===========");
   	 	for(var j = 1; j <= 9; j++){
       			 console.log(i + " x " + j + "=" + i * j);
    		}
	}

	주석 //
	/* ~~~ */

	1. 설명
	2. 코드 실행 배제
	

ECMAScript6 추가된 데이터 타입

1. 심벌
Symbol() : 유일값
중복될 가능성이 있을때 사용

2. 템플릿 리터럴
` ` (ESC 밑)

자연스러운 문장 추구
보간표현법(placeholder) - 변수값을 치환
	${변수명}
var num1 = 10;
var num2 = 20;

var str = `${num1} + ${num2} = ${num1+num2}`;

메타 문자 - 동작 통제 문자
\n -> new line -> 줄개행
\r -> carriage return -> 첫 칸으로 이동
\t -> tab
\b -> backspace (<-)


\r\n -> 엔터키



객체 리터럴
객체 (Object - 사물, 대상)?

자동차
	-속성-

	-바퀴
	-엔진
	-연등 ..

	-행위-
	움직인다

운전자

자동차, 운전자 -> 상호작용

1. 객체리터럴로 객체 생성하기
{
	속성명 : 속성값,
	속성명 : 속성값,
	....
}

.(마침표)

변수.속성명;
변수['속성명'];

2. 프로퍼티 추가와 삭제
객체 안에 없는 속성에 값을 대입 -> 추가
객체 안에 있는 속성에 값을 대입 -> 수정

delete 변수.속성명;


3. in 연산자로 프로퍼티가 있는지 확인하기

in -> 속성명이 존재하는지 체크하는 연산자

'속성명' in 변수;

for (속성명 in 객체 참조변수){

	}

4. 객체는 참조 타입

참조 : 참고한다.

모든 객체를 참고 하는 변수 -> 주소를 가지고 접근

참조 변수(주소)

함수 - 기능을 담당

1. 함수 선언문으로 함수 정의하기
function 함수명 (매개변수 ....) {
	//기능을 수행하는 코드

	return 반환값;
      }

-매개변수가 없거나 1개이상..

2. 함수 호출

함수명(값, .....);


3. 함수 선언문의 끌어올림

4. 값으로서 함수

함수 객체

function 함수명(매개변수, ....) {
	// 실행되는 코드가 정의되는 부분
	return 반환값; //반환값 출력, 함수 종료, 메모리 해제
	}

console.dir(함수명)

함수명(변수명) = 함수 객체;

window; = 코드를 분석

console.dir(window);

함수 -> 객체 -> 값
속성값 : 원시타입값(숫자, 문자...), 객체(모든값)

일급 객체

5. 변수의 유효범위

전역변수

지역변수
(지역 -> 함수 내)

상대적인 개념
함수 객체 -> 값
	함수 객체 -> 함수 객체 정의
	매개변수
	반환값



Global Execution Context - Global EC
	변수 : window 속성 (변수, 참조변수)
	외부 변수 참조 : null

	this 바인딩 : window

outer(); -> 실행위한 객체(Execution Context - EC)
	outer EC {
		변수 : 원시타입 변수
		      : 참조 변수

		외부 변수 참조 : Global EC 변수 참조
		
		this 바인딩 : 함수를 호출한 객체
		}

inner() -> 실행위한 객체 (Execution Context)
	inner EC{
		변수 : 원시타입 변수
		      : 참조 변수
		외부 변수 참조: outer EC 변수 참조
	
		this 바인딩 : 함수를 호출한 객체
		}
this

클로저 : 함수를 참조하지 않거나 함수가 유지되어 있는 함수

값을 넣어서 새로운 함수를 만드는 함수 : 팩토리 함수





EC 스택 메모리에서 실행 -> 제거

ECMAScript3
ECMAScript5
ECMAScript6 (2015)
ECMAScript6+ (ESNext)



